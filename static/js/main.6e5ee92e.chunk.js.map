{"version":3,"sources":["assets/codepen.svg","assets/twitter.svg","assets/github.svg","profile-card.js","data/people.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ProfileCard","profileImg","name","twitter","github","codepen","className","src","alt","href","rel","target","Twitter","Github","Codepen","PEOPLE","picture","framework","App","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,iOC8C5BC,EAlCK,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,WAAYC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAQxD,OACE,6BAASC,UAAU,gBACjB,yBAAKA,UAAU,oBAAoBC,IAAKN,EAAYO,IAAG,UAAKN,KAC5D,wBAAII,UAAU,uBAAuBJ,GACrC,wBAAII,UAAU,uBACVH,GAAW,4BACX,uBAAGM,KAAMN,EAASO,IAAI,sBAAsBC,OAAO,UACjD,yBAAKJ,IAAKK,IAASJ,IAAI,cAGzBJ,GAAU,4BACV,uBAAGK,KAAML,EAAQM,IAAI,sBAAsBC,OAAO,UAChD,yBAAKJ,IAAKM,IAAQL,IAAI,aAGxBH,GAAW,4BACX,uBAAGI,KAAMJ,EAASK,IAAI,sBAAsBC,OAAO,UACjD,yBAAKJ,IAAKO,IAASN,IAAI,gBCiBpBO,G,MAtDA,CAGb,CACEb,KAAM,gBACNc,QACE,gFACFb,QAAS,gCACTC,OAAQ,2BACRC,QAAS,0BACTY,UAAW,OAIb,CACEf,KAAM,aACNc,QACE,+EACFb,QAAS,6BACTc,UAAW,SAEb,CACEf,KAAM,UACNc,QACE,+EACFb,QAAS,6BACTc,UAAW,SAEb,CACEf,KAAM,cACNc,QACE,gFACFb,QAAS,kCACTc,UAAW,SAIb,CACEf,KAAM,iBACNc,QACE,+EACFb,QAAS,oCACTc,UAAW,WAEb,CACEf,KAAM,YACNc,QACE,+EACFb,QAAS,gCACTc,UAAW,aCXAC,EA1BH,WACV,OACE,yBAAKZ,UAAU,OAEb,6BAASA,UAAU,YACjB,4DACA,yBAAKA,UAAU,uBACZS,GACCA,EAAOI,KACL,gBAAGjB,EAAH,EAAGA,KAAeD,EAAlB,EAASe,QAAqBb,EAA9B,EAA8BA,QAASC,EAAvC,EAAuCA,OAAQC,EAA/C,EAA+CA,QAA/C,OACE,kBAAC,EAAD,CACEe,IAAKlB,EACLD,WAAYA,EACZC,KAAMA,EACNC,QAASA,EACTC,OAAQA,EACRC,QAASA,WChBPgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6e5ee92e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/codepen.14be1369.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.be066898.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.617870e4.svg\";","import React from 'react';\r\n\r\n// ./ indicates local file vs node_modules\r\nimport './profile-card.css';\r\n\r\n// import svg as modules so we can use them in our jsx.\r\n// In webpack or other bundlers you can import images like a module and it will recognize that and deploy it for you.\r\nimport Codepen from './assets/codepen.svg';\r\nimport Twitter from './assets/twitter.svg';\r\nimport Github from './assets/github.svg';\r\n\r\n// Destructure props object (normaly might to function (props) and have to do props.name, etc. instead of just name so we destructure it here to just make it easier on ourselves)\r\nconst ProfileCard = ({ profileImg, name, twitter, github, codepen }) => {\r\n\r\n  // Have to have 1 containing element, can use Fragment if you don't want a container or div.\r\n  // Use className in jsx instead of class because of conflicting js keywords.\r\n\r\n  // {} means you can inject some Javascript into your jsx\r\n  // Short circuiting: https://codeburst.io/javascript-what-is-short-circuit-evaluation-ff22b2f5608c\r\n\r\n  return (\r\n    <section className=\"profile-card\">\r\n      <img className=\"profile-card__img\" src={profileImg} alt={`${name}`}/>\r\n      <h1 className=\"profile-card__title\">{name}</h1>\r\n      <ul className=\"profile-card__links\">\r\n        { twitter && <li>\r\n          <a href={twitter} rel=\"noopener noreferrer\" target=\"_blank\">\r\n            <img src={Twitter} alt=\"twitter\"></img>\r\n          </a>\r\n        </li> }\r\n        { github && <li>\r\n          <a href={github} rel=\"noopener noreferrer\" target=\"_blank\">\r\n            <img src={Github} alt=\"github\"></img>\r\n          </a>\r\n        </li> }\r\n        { codepen && <li>\r\n          <a href={codepen} rel=\"noopener noreferrer\" target=\"_blank\">\r\n            <img src={Codepen} alt=\"github\"></img>\r\n          </a>\r\n        </li> }\r\n      </ul>\r\n    </section>\r\n  );\r\n\r\n}\r\n\r\nexport default ProfileCard;","const PEOPLE = [\r\n\r\n  // Vue Devs\r\n  {\r\n    name: 'Sarah Drasner',\r\n    picture:\r\n      'https://pbs.twimg.com/profile_images/1225613270205091840/NyoNYuhC_400x400.jpg',\r\n    twitter: 'https://twitter.com/sarah_edo',\r\n    github: 'https://github.com/sdras',\r\n    codepen: 'http://codepen.io/sdras',\r\n    framework: 'vue'\r\n  },\r\n\r\n  // React Devs\r\n  {\r\n    name: 'Brian Holt',\r\n    picture:\r\n      'https://pbs.twimg.com/profile_images/870650842914983936/xzGIOGxE_400x400.jpg',\r\n    twitter: 'https://twitter.com/holtbt',\r\n    framework: 'react'\r\n  },\r\n  {\r\n    name: 'Wes Bos',\r\n    picture:\r\n      'https://pbs.twimg.com/profile_images/877525007185858562/7G9vGTca_400x400.jpg',\r\n    twitter: 'https://twitter.com/wesbos',\r\n    framework: 'react'\r\n  },\r\n  {\r\n    name: 'Dan Abramov',\r\n    picture:\r\n      'https://pbs.twimg.com/profile_images/1166344766210150401/amRnWzl-_400x400.jpg',\r\n    twitter: 'https://twitter.com/dan_abramov',\r\n    framework: 'react'\r\n  },\r\n\r\n  // Angular Devs\r\n  {\r\n    name: 'Deborah Kurata',\r\n    picture:\r\n      'https://pbs.twimg.com/profile_images/805904808825667584/ZySojzWL_400x400.jpg',\r\n    twitter: 'https://twitter.com/DeborahKurata',\r\n    framework: 'angular'\r\n  },\r\n  {\r\n    name: 'John Papa',\r\n    picture:\r\n      'https://pbs.twimg.com/profile_images/888397702391902208/CupdIngs_400x400.jpg',\r\n    twitter: 'https://twitter.com/John_Papa',\r\n    framework: 'angular'\r\n  }\r\n\r\n];\r\n\r\nexport default PEOPLE;\r\n","import React from 'react';\nimport ProfileCard from './profile-card';\n\nimport './App.css';\n\nimport PEOPLE from './data/people';\n\n// To Add:\n// State example to main app.\n// Sorting / Filters?\n// Following option for each profile card\n// Make flow chart to show data / rerender flow\nconst App = () => {\n  return (\n    <div className=\"app\">\n      {/* Turn this into a component and pass this as props.children */}\n      <section className=\"profiles\">\n        <h1>Awesome Developers to follow</h1>\n        <div className=\"grid grid--centered\">\n          {PEOPLE &&\n            PEOPLE.map(\n              ({ name, picture: profileImg, twitter, github, codepen }) => (\n                <ProfileCard\n                  key={name}\n                  profileImg={profileImg}\n                  name={name}\n                  twitter={twitter}\n                  github={github}\n                  codepen={codepen}\n                ></ProfileCard>\n              )\n            )}\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}